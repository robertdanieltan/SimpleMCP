version: '3.8'

services:
  ai-agent:
    build: ./ai-agent-service
    ports:
      - "${AI_AGENT_PORT:-8000}:8000"
    environment:
      # Unified LLM Provider Configuration (RECOMMENDED)
      - LLM_PROVIDER=${LLM_PROVIDER}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.7}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS:-1000}
      - LLM_TIMEOUT=${LLM_TIMEOUT:-30}
      - LLM_BASE_URL=${LLM_BASE_URL}
      - LLM_ORGANIZATION=${LLM_ORGANIZATION}
      - LLM_SAFETY_SETTINGS=${LLM_SAFETY_SETTINGS}
      - LLM_KEEP_ALIVE=${LLM_KEEP_ALIVE}
      - LLM_MAX_RETRIES=${LLM_MAX_RETRIES}
      - LLM_NUM_PREDICT=${LLM_NUM_PREDICT}
      - LLM_SIMULATE_DELAY=${LLM_SIMULATE_DELAY}
      - LLM_FAILURE_RATE=${LLM_FAILURE_RATE}
       # Session Configuration
      - LLM_SESSION_TIMEOUT_HOURS=${LLM_SESSION_TIMEOUT_HOURS:-24}
      - LLM_MAX_CONCURRENT_SESSIONS=${LLM_MAX_CONCURRENT_SESSIONS:-100}
      # Service Configuration
      - MCP_SERVICE_URL=http://mcp-service:8001
      - AI_AGENT_SERVICE_URL=http://ai-agent:8000
      # Development Settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-true}
    depends_on:
      mcp-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aiagent-network

  mcp-service:
    build: ./mcp-service
    ports:
      - "${MCP_SERVICE_PORT:-8001}:8001"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aiagent-network

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/test_data.sql:/docker-entrypoint-initdb.d/02-test-data.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - aiagent-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin_servers.json:/pgadmin4/servers.json:ro
    networks:
      - aiagent-network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  aiagent-network:
    driver: bridge